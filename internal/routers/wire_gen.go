// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package routers

import (
	"github.com/Hsun-Weng/human-resource-service/internal/controllers"
	"github.com/Hsun-Weng/human-resource-service/internal/controllers/v1"
	"github.com/Hsun-Weng/human-resource-service/internal/middleware"
	"github.com/Hsun-Weng/human-resource-service/internal/repository"
	"github.com/Hsun-Weng/human-resource-service/internal/services"
	"github.com/Hsun-Weng/human-resource-service/pkg/util"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeEngine() (*gin.Engine, error) {
	client := util.NewRedisClient()
	cacheService := services.NewCacheService(client)
	adminAuthenticationMiddleware := middleware.NewAdminAuthenticationMiddleware(cacheService)
	db := util.NewDb()
	employeeRepository := repository.NewEmployeeRepository(db)
	loginService := services.NewLoginService(employeeRepository, cacheService)
	loginController := v1.NewLoginController(loginService)
	employeeService := services.NewEmployeeService(employeeRepository)
	employeeController := v1.NewEmployeeController(employeeService)
	leaveRepository := repository.NewLeaveRepository(db)
	leaveService := services.NewLeaveService(leaveRepository)
	leaveController := v1.NewLeaveController(leaveService)
	engine := NewRouter(adminAuthenticationMiddleware, loginController, employeeController, leaveController)
	return engine, nil
}

// wire.go:

var Set = wire.NewSet(util.NewDb, util.NewRedisClient, repository.ProviderSet, services.ProviderSet, controllers.ProviderSet, middleware.NewAdminAuthenticationMiddleware, NewRouter)
